----------------------------------------------------
-- CLIENTSIDE COLOR CHANGER LOGIC
----------------------------------------------------
-- Global color variables (initial defaults)
local colorChangerEnabled = false
local newCourtColor = BrickColor.new("Lime green")
local newBallColor = BrickColor.new("Bright red")
local newBounceColor = BrickColor.new("Bright yellow")
local newLandingColor = BrickColor.new("Bright orange")

-- Colors that should remain unchanged for courts
local excludedColors = {
    ["Really black"] = true,
    ["Black"] = true,
    ["Really white"] = true,
    ["White"] = true,
    ["Medium stone grey"] = true,
    ["Dark stone grey"] = true,
    ["Light stone grey"] = true,
}

-- When updating a court part, store its original color (if not already stored)
local function updateCourtPartColor(part)
    if part:IsA("BasePart") then
        local currentColorName = part.BrickColor.Name
        if not excludedColors[currentColorName] then
            if not part:GetAttribute("OriginalCourtColor") then
                part:SetAttribute("OriginalCourtColor", currentColorName)
            end
            print("Updating court part:", part:GetFullName(), "to", newCourtColor.Name)
            part.BrickColor = newCourtColor
        else
            print("Skipping court part:", part:GetFullName(), "with excluded color:", currentColorName)
        end
    end
end

-- Revert all court parts to their original color (if stored)
local function revertCourtsToOriginal()
    local courtsFolder = game.Workspace:FindFirstChild("Courts")
    if courtsFolder then
        for _, part in ipairs(courtsFolder:GetDescendants()) do
            if part:IsA("BasePart") then
                local orig = part:GetAttribute("OriginalCourtColor")
                if orig then
                    print("Reverting court part:", part:GetFullName(), "to", orig)
                    part.BrickColor = BrickColor.new(orig)
                    part:SetAttribute("OriginalCourtColor", nil)
                end
            end
        end
    else
        warn("Courts folder not found in Workspace.")
    end
end

local function updateBallObject(object)
    local lowerName = object.Name:lower()
    local parentLower = (object.Parent and object.Parent.Name:lower()) or ""
    local isBounce = lowerName:find("bounce") or parentLower:find("bounce")
    local isLanding = lowerName:find("land") or parentLower:find("land")
    
    if object:IsA("BasePart") then
        if isBounce then
            print("Updating Bounce effect BasePart:", object:GetFullName(), "to", newBounceColor.Name)
            object.BrickColor = newBounceColor
        elseif isLanding then
            print("Updating Landing effect BasePart:", object:GetFullName(), "to", newLandingColor.Name)
            object.BrickColor = newLandingColor
        else
            print("Updating ball BasePart:", object:GetFullName(), "to", newBallColor.Name)
            object.BrickColor = newBallColor
        end
    elseif object:IsA("Trail") then
        if isBounce then
            object.Color = ColorSequence.new(newBounceColor.Color)
        elseif isLanding then
            object.Color = ColorSequence.new(newLandingColor.Color)
        else
            object.Color = ColorSequence.new(newBallColor.Color)
        end
    elseif object:IsA("SelectionBox") then
        if isBounce then
            object.LineColor = newBounceColor.Color
        elseif isLanding then
            object.LineColor = newLandingColor.Color
        else
            object.LineColor = newBallColor.Color
        end
    elseif object:IsA("ParticleEmitter") then
        if isBounce then
            object.Color = ColorSequence.new(newBounceColor.Color)
        elseif isLanding then
            object.Color = ColorSequence.new(newLandingColor.Color)
        else
            object.Color = ColorSequence.new(newBallColor.Color)
        end
    end
end

local function applyColorsToCourts()
    local courtsFolder = game.Workspace:FindFirstChild("Courts")
    if courtsFolder then
        for _, part in ipairs(courtsFolder:GetDescendants()) do
            updateCourtPartColor(part)
        end
    else
        warn("Courts folder not found in Workspace.")
    end
end

local function applyColorsToBalls()
    local holderFolder = game.Workspace:FindFirstChild("Holder")
    if holderFolder then
        local ballsFolder = holderFolder:FindFirstChild("Balls")
        local effectsFolder = holderFolder:FindFirstChild("Effects")
        if ballsFolder then
            for _, obj in ipairs(ballsFolder:GetDescendants()) do
                updateBallObject(obj)
            end
        else
            warn("Balls folder not found under Holder.")
        end
        if effectsFolder then
            for _, obj in ipairs(effectsFolder:GetDescendants()) do
                updateBallObject(obj)
            end
        else
            warn("Effects folder not found under Holder.")
        end
    else
        warn("Holder folder not found in Workspace.")
    end
end

local function applyColors()
    if colorChangerEnabled then
        applyColorsToCourts()
        applyColorsToBalls()
    end
end

-- Listen for new parts so that they update automatically
local courtsFolder = game.Workspace:FindFirstChild("Courts")
if courtsFolder then
    courtsFolder.DescendantAdded:Connect(function(part)
        if colorChangerEnabled then
            updateCourtPartColor(part)
        end
    end)
end

local holderFolder = game.Workspace:FindFirstChild("Holder")
if holderFolder then
    local ballsFolder = holderFolder:FindFirstChild("Balls")
    local effectsFolder = holderFolder:FindFirstChild("Effects")
    if ballsFolder then
        ballsFolder.DescendantAdded:Connect(function(obj)
            if colorChangerEnabled then
                updateBallObject(obj)
            end
        end)
    end
    if effectsFolder then
        effectsFolder.DescendantAdded:Connect(function(obj)
            if colorChangerEnabled then
                updateBallObject(obj)
            end
        end)
    end
end

----------------------------------------------------
-- GLOBAL FUNCTIONS FOR GUI INTEGRATION (COLOR CHANGER)
----------------------------------------------------
_G.CourtBallColourChangerOn = function(courtColor, ballColor)
    print("[DEBUG] Applying Court Color:", courtColor, "and Ball Color:", ballColor)
    newCourtColor = BrickColor.new(courtColor)
    newBallColor = BrickColor.new(ballColor)
    colorChangerEnabled = true
    applyColors()
end

_G.CourtBallColourChangerOff = function()
    print("[DEBUG] Disabling Court/Ball Colour Changer")
    colorChangerEnabled = false
    revertCourtsToOriginal()
end

----------------------------------------------------
-- (The GUI portion remains as you provided)
----------------------------------------------------
-- [Insert your GUI code here that calls _G.CourtBallColourChangerOn and _G.CourtBallColourChangerOff]
-- For example, when the user clicks the Apply button in your Court/Ball Colour Changer panel:
--    local courtC = getCourtColor()  --> a function from your GUI that returns a Color3 value
--    local ballC = getBallColor()    --> similar for ball
--    _G.CourtBallColourChangerOn(courtC, ballC)
-- And when Off is pressed, call:
--    _G.CourtBallColourChangerOff()

print("[DEBUG] Color changer script loaded.")
